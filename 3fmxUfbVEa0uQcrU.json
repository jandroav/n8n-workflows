{
  "active": false,
  "connections": {
    "Flatten Input": {
      "main": [
        [
          {
            "node": "Create Summary",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Summary": {
      "main": [
        [
          {
            "node": "Chunk Daily Message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Chunk Daily Message": {
      "main": [
        [
          {
            "node": "Send a message1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get ALL issues": {
      "main": [
        [
          {
            "node": "Flatten Input",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Daily Evening Trigger": {
      "main": [
        [
          {
            "node": "Get ALL issues",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Anthropic Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Create Summary",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2025-10-19T13:17:16.070Z",
  "id": "3fmxUfbVEa0uQcrU",
  "isArchived": false,
  "meta": {
    "templateId": "9683",
    "templateCredsSetupCompleted": true
  },
  "name": "Generate Daily Jira Summaries",
  "nodes": [
    {
      "parameters": {
        "content": "## Daily Evening Trigger  \nSchedules and initiates the EOD workflow each workday evening automatically."
      },
      "id": "7f98fa32-a744-4dec-a036-d3ddf33ce314",
      "name": "Sticky Note",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -672,
        576
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "## Get ALL issues (Jira)  \nRetrieves all Jira issues for the day, including statuses, priorities, and assignees, to power the EOD summary.",
        "height": 176
      },
      "id": "99e9cdb5-44cb-4505-aed8-0032277e8c02",
      "name": "Sticky Note1",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -224,
        384
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "operation": "getAll",
        "returnAll": true,
        "options": {
          "jql": "updated >= -5d AND \"developer[user picker (single user)]\" = \"avazquez@liquibase.com\" ORDER BY created DESC"
        }
      },
      "id": "3c718a3e-e58f-4242-8e27-e3201197b22b",
      "name": "Get ALL issues",
      "type": "n8n-nodes-base.jira",
      "position": [
        -128,
        608
      ],
      "typeVersion": 1,
      "credentials": {
        "jiraSoftwareCloudApi": {
          "id": "cHlXrG05mBLoocuF",
          "name": "Jira SW Cloud account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// n8n Code node: merge all incoming items into a single output array in one item\n\nconst inputItems = $input.all();\nconst combined = [];\n\n// Normalize any value to an array of plain objects\nfunction normalizeToArray(val) {\n  if (typeof val === 'string') {\n    const trimmed = val.trim();\n    try {\n      const parsed = JSON.parse(trimmed);\n      return Array.isArray(parsed) ? parsed : [parsed];\n    } catch {\n      return [{ raw: trimmed }];\n    }\n  }\n  if (Array.isArray(val)) return val;\n  if (val && typeof val === 'object') return [val];\n  return [{ value: val }];\n}\n\n// Merge all items' json into one array\nfor (const item of inputItems) {\n  const source = item.json !== undefined ? item.json : item;\n  const arr = normalizeToArray(source);\n  for (const el of arr) {\n    const obj = el && typeof el === 'object' ? el : { value: el };\n    combined.push(obj);\n  }\n}\n\n// Return a single n8n item containing the whole array\nreturn [\n  {\n    json: {\n      combined,            // All input collapsed into one array\n      count: combined.length\n    }\n  }\n];\n"
      },
      "id": "2c39f362-8138-48ea-9cad-293be84ac6ea",
      "name": "Flatten Input",
      "type": "n8n-nodes-base.code",
      "position": [
        96,
        608
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.combined }}",
        "options": {
          "systemMessage": "You are an End‑of‑Day (EOD) Report generator for engineering teams. Your job is to read a pasted text blob representing the day’s work (e.g., combined Jira issue array, logs, API responses) and produce a consistent EOD summary every single time using the exact template and rules below. Do not ask questions. Infer context only from the input.\n\nINPUT FORMAT\n- The input may be a single object containing { combined: [...], count: N } or a raw array of issue/work items.\n- Treat JSON keys/values and log lines as source of truth.\n- Today’s local time context: Asia/Kolkata (IST), unless clearly indicated otherwise.\n\nOUTPUT TEMPLATE\n1) EOD Summary\n- One concise paragraph describing today’s overall outcome and the most important takeaway (e.g., completion, progress, blockers).\n\n2) Key Metrics (Today)\n- Total items processed:\n- Completed (statusCategory: Done or resolution present):\n- In Progress (status.name: In Progress):\n- Backlog/To Do (statusCategory: To Do or status.name: Backlog/To Do):\n- Bugs vs Tasks (issuetype.name counts):\n- Top assignees (by count, up to 3):\n- Priority distribution (by priority.name):\n\n3) Notable Updates Today\n- 3–6 bullets referencing specific keys and summaries (e.g., SCRUM-1: Done; summary: “Fix login API timeout”; resolutiondate/timestamp if present, in IST label).\n\n4) Blockers & Risks\n- Bullets inferred from statuses, null fields (e.g., timeoriginalestimate), overdue sprint windows, inconsistent “active” vs past endDate, or items showing no progress (created vs updated).\n\n5) Actions for Tomorrow\n- 4–7 prioritized, action‑oriented steps tied to blockers and carryover (assign, add estimate, re‑prioritize, resolve conflicts, test/monitor, etc.).\n\n6) Data Snapshot (Appendix)\n- Quote minimal exact fields for 3–5 representative records (issue key, summary, status.name, statusCategory.name, resolution.name, assignee.displayName, priority.name, created, updated). Use original field names exactly.\n\nCLASSIFICATION RULES\n- Completed = statusCategory.key: done OR resolution present.\n- In Progress = status.name: In Progress OR statusCategory.key: indeterminate.\n- Backlog/To Do = status.name: Backlog/To Do OR statusCategory.key: new.\n- Bugs vs Tasks from issuetype.name.\n- Use input’s combined array if present; otherwise use the root array.\n- When timestamps are reported in readable form, label clearly as IST; otherwise preserve originals.\n\nFORMATTING RULES\n- Be concise; no fluff.\n- Headings and section order must never change.\n- Preserve field names exactly (e.g., statuscategorychangedate).\n- Use bold sparingly for 2–4 critical items/terms.\n- If a section has no data, write “None”.\n- Do not add links unless present in the input.\n\nERROR HANDLING\n- If the input appears incomplete or malformed, write “Input appears incomplete or malformed” in EOD Summary, then proceed with whatever can be extracted.\n\nCONSISTENCY CHECK\n- Ensure all six sections are present, labels match exactly, counts are internally consistent, and referenced keys/summaries match the input."
        }
      },
      "id": "541e6a65-0b74-46e9-92ac-08a808d96617",
      "name": "Create Summary",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "position": [
        320,
        496
      ],
      "typeVersion": 2.2
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {}
          ]
        }
      },
      "id": "7a2b9ad3-2d97-4d08-b446-8433e1cfde8d",
      "name": "Daily Evening Trigger",
      "type": "n8n-nodes-base.scheduleTrigger",
      "position": [
        -352,
        608
      ],
      "typeVersion": 1.2
    },
    {
      "parameters": {
        "content": "## Flatten Input  \nNormalizes and flattens the Jira JSON into a lighter structure so downstream nodes can parse consistently.",
        "height": 176
      },
      "id": "b801b90c-db22-4b11-827d-b328009adcd4",
      "name": "Sticky Note2",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        16,
        768
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "## Chat Model (EOD)  \nGenerates a structured End‑of‑Day summary from the flattened issue data using the configured Azure OpenAI model.",
        "height": 192
      },
      "id": "5f53696f-5ebe-4532-9f17-ae7787262707",
      "name": "Sticky Note3",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        304,
        256
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "claude-3-5-haiku-20241022",
          "mode": "list",
          "cachedResultName": "Claude Haiku 3.5"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatAnthropic",
      "typeVersion": 1.3,
      "position": [
        304,
        752
      ],
      "id": "92c74b7c-8ca8-409d-98a5-8de0a0f7fefd",
      "name": "Anthropic Chat Model",
      "credentials": {
        "anthropicApi": {
          "id": "WHAwKkMwCUyPXaxT",
          "name": "Anthropic account"
        }
      }
    },
    {
      "parameters": {
        "resource": "message",
        "guildId": {
          "__rl": true,
          "value": "1429362234018238486",
          "mode": "list",
          "cachedResultName": "n8n",
          "cachedResultUrl": "https://discord.com/channels/1429362234018238486"
        },
        "channelId": {
          "__rl": true,
          "value": "1429429487275216957",
          "mode": "list",
          "cachedResultName": "jira",
          "cachedResultUrl": "https://discord.com/channels/1429362234018238486/1429429487275216957"
        },
        "content": "={{ $json.content }}",
        "options": {}
      },
      "type": "n8n-nodes-base.discord",
      "typeVersion": 2,
      "position": [
        976,
        496
      ],
      "id": "4e8dfedb-d79e-47dc-9ca0-7d6a7cb5d045",
      "name": "Send a message1",
      "webhookId": "8d19bf2e-ff12-409d-a4ed-4651a0e69dda",
      "credentials": {
        "discordBotApi": {
          "id": "I7ISPUgIL3bwvNon",
          "name": "Discord Bot account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Chunk messages for Discord (2000 char limit)\nconst DISCORD_LIMIT = 1900; // Safe margin\n\nfunction chunkMessage(text, maxLength) {\n  if (text.length <= maxLength) {\n    return [text];\n  }\n  \n  const chunks = [];\n  let remaining = text;\n  \n  while (remaining.length > 0) {\n    if (remaining.length <= maxLength) {\n      chunks.push(remaining);\n      break;\n    }\n    \n    // Try to split at newline near the limit\n    let splitAt = maxLength;\n    const nearbyNewline = remaining.lastIndexOf('\\n', maxLength);\n    \n    if (nearbyNewline > maxLength * 0.7) {\n      splitAt = nearbyNewline + 1;\n    }\n    \n    chunks.push(remaining.substring(0, splitAt));\n    remaining = remaining.substring(splitAt);\n  }\n  \n  return chunks;\n}\n\nconst items = $input.all();\nconst result = [];\n\nfor (const item of items) {\n  const content = item.json.output || item.json.html || JSON.stringify(item.json);\n  const chunks = chunkMessage(content, DISCORD_LIMIT);\n  \n  chunks.forEach((chunk, index) => {\n    const partInfo = chunks.length > 1 ? `\\n\\n📄 Part ${index + 1}/${chunks.length}` : '';\n    result.push({\n      json: {\n        content: chunk + partInfo,\n        originalLength: content.length,\n        chunkIndex: index,\n        totalChunks: chunks.length\n      }\n    });\n  });\n}\n\nreturn result;"
      },
      "id": "81da8ead-b477-4059-a738-8c85c05fa2ee",
      "name": "Chunk Daily Message",
      "type": "n8n-nodes-base.code",
      "position": [
        704,
        496
      ],
      "typeVersion": 2
    }
  ],
  "origin": "n8n",
  "pinData": {},
  "repo": {
    "owner": "jandroav",
    "name": "n8n-workflows"
  },
  "settings": {},
  "shared": [
    {
      "createdAt": "2025-10-19T13:17:16.070Z",
      "updatedAt": "2025-10-19T13:17:16.070Z",
      "role": "workflow:owner",
      "workflowId": "3fmxUfbVEa0uQcrU",
      "projectId": "FfA4w77iv8Q7RJb9"
    }
  ],
  "staticData": null,
  "tags": [],
  "triggerCount": 0,
  "updatedAt": "2025-10-20T03:45:19.652Z",
  "versionId": "a7e85dbd-68f6-4f3c-9bf8-c6d487b2531c"
}